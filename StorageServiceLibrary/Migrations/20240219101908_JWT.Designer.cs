// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StorageServiceLibrary.Model;

#nullable disable

namespace StorageServiceLibrary.Migrations
{
    [DbContext(typeof(AppDB))]
    [Migration("20240219101908_JWT")]
    partial class JWT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9f145c54-ed30-408e-ab15-7fc05f228f11",
                            Name = "Users",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "001b21d4-95b8-44f8-8083-39b95a632cfc",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "85e55551-4e49-4dc9-bf0c-9207f00753cb",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.Category", b =>
                {
                    b.Property<int>("Id_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Category"));

                    b.Property<int>("SubTypeCegory")
                        .HasColumnType("int");

                    b.Property<string>("SubTypeCegoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCategory")
                        .HasColumnType("int");

                    b.Property<string>("TypeCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Category");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id_Category = 1,
                            SubTypeCegory = 1,
                            SubTypeCegoryName = "Corn",
                            TypeCategory = 1,
                            TypeCategoryName = "CategorySeed"
                        },
                        new
                        {
                            Id_Category = 2,
                            SubTypeCegory = 1,
                            SubTypeCegoryName = "UREA",
                            TypeCategory = 2,
                            TypeCategoryName = "Fertilizer"
                        });
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.Field", b =>
                {
                    b.Property<int>("Id_Field")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Field"));

                    b.Property<double>("Ar")
                        .HasColumnType("float");

                    b.Property<string>("Field_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Ha")
                        .HasColumnType("float");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("M")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Field");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id_Field = 1,
                            Ar = 0.0,
                            Field_number = "2494/20",
                            Ha = 2.0,
                            Id_User = "48275",
                            Link = "",
                            M = 0.0,
                            Name = "Kuvajt",
                            Note = ""
                        },
                        new
                        {
                            Id_Field = 2,
                            Ar = 0.0,
                            Field_number = "7739",
                            Ha = 1.5,
                            Id_User = "48275",
                            Link = "https://a3.geosrbija.rs/share/0dfacc67fca1",
                            M = 0.0,
                            Name = "Kanal",
                            Note = ""
                        });
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.Plan", b =>
                {
                    b.Property<int>("Id_plan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_plan"));

                    b.Property<double>("Ar")
                        .HasColumnType("float");

                    b.Property<int>("CategoryRefId")
                        .HasColumnType("int");

                    b.Property<int>("FieldRefId")
                        .HasColumnType("int");

                    b.Property<double>("Ha")
                        .HasColumnType("float");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("M")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ReproMaterialRefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.Property<double>("Yields")
                        .HasColumnType("float");

                    b.HasKey("Id_plan");

                    b.HasIndex("CategoryRefId");

                    b.HasIndex("FieldRefId");

                    b.HasIndex("ReproMaterialRefId");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            Id_plan = 1,
                            Ar = 0.0,
                            CategoryRefId = 1,
                            FieldRefId = 1,
                            Ha = 1.0,
                            Id_User = "48275",
                            M = 0.0,
                            Note = "",
                            Price = 0.0,
                            ReproMaterialRefId = 1,
                            Year = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Yields = 0.0
                        },
                        new
                        {
                            Id_plan = 2,
                            Ar = 0.0,
                            CategoryRefId = 1,
                            FieldRefId = 2,
                            Ha = 1.0,
                            Id_User = "48275",
                            M = 0.0,
                            Note = "",
                            Price = 0.0,
                            ReproMaterialRefId = 2,
                            Year = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Yields = 0.0
                        },
                        new
                        {
                            Id_plan = 3,
                            Ar = 0.0,
                            CategoryRefId = 1,
                            FieldRefId = 2,
                            Ha = 1.5,
                            Id_User = "48275",
                            M = 0.0,
                            Note = "",
                            Price = 0.0,
                            ReproMaterialRefId = 1,
                            Year = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Yields = 0.0
                        });
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.ReproMaterial", b =>
                {
                    b.Property<int>("Id_Repro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Repro"));

                    b.Property<int?>("CategoryRefId")
                        .HasColumnType("int");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Sort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Repro");

                    b.HasIndex("CategoryRefId");

                    b.ToTable("ReproMaterials");

                    b.HasData(
                        new
                        {
                            Id_Repro = 1,
                            CategoryRefId = 1,
                            Id_User = "48275",
                            Note = "",
                            Price = 29990.0,
                            Quantity = 3.0,
                            Sort = "DKC5075",
                            UoM = "kg",
                            Year = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Repro = 2,
                            CategoryRefId = 1,
                            Id_User = "48275",
                            Note = "",
                            Price = 29990.0,
                            Quantity = 3.0,
                            Sort = "DKC5075",
                            UoM = "kg",
                            Year = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Repro = 3,
                            CategoryRefId = 2,
                            Id_User = "48275",
                            Note = "",
                            Price = 49990.0,
                            Quantity = 3.0,
                            Sort = "UREA",
                            UoM = "T",
                            Year = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StorageServiceLibrary.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StorageServiceLibrary.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageServiceLibrary.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StorageServiceLibrary.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.Plan", b =>
                {
                    b.HasOne("StorageServiceLibrary.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageServiceLibrary.Model.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageServiceLibrary.Model.ReproMaterial", "ReproMaterial")
                        .WithMany()
                        .HasForeignKey("ReproMaterialRefId");

                    b.Navigation("Category");

                    b.Navigation("Field");

                    b.Navigation("ReproMaterial");
                });

            modelBuilder.Entity("StorageServiceLibrary.Model.ReproMaterial", b =>
                {
                    b.HasOne("StorageServiceLibrary.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryRefId");

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
